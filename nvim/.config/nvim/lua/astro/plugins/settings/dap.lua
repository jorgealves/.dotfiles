-- local ok, dap_install = pcall(require, 'dap-install')
-- if not ok then
--   error('error loading dap install plugin')
--   return
-- end
--
-- dap_install.setup({
--   installation_path = vim.fn.stdpath('data') .. '/dapinstall/',
-- })
--
-- local ok, dap = pcall(require, 'dap')
--
-- if not ok then
--   error('error loading dap plugin')
--   return
-- end
--
-- local ok, dap_python = pcall(require,'dap-python')
--
-- if not ok then
--   error('error loading dap python plugin')
--   return
-- end
--
-- dap_python.setup()
--
--
-- local ok, dapui = pcall(require, 'dapui')
-- if not ok then
--   error('error loading dap ui plugin')
--   return
-- end
--
-- dapui.setup({
--   icons = { expanded = "▾", collapsed = "▸" },
--   mappings = {
--     -- Use a table to apply multiple mappings
--     expand = { "<CR>", "<2-LeftMouse>" },
--     open = "o",
--     remove = "d",
--     edit = "e",
--     repl = "r",
--     toggle = "t",
--   },
--   sidebar = {
--     -- You can change the order of elements in the sidebar
--     elements = {
--       -- Provide as ID strings or tables with "id" and "size" keys
--       {
--         id = "scopes",
--         size = 0.25, -- Can be float or integer > 1
--       },
--       { id = "breakpoints", size = 0.25 },
--       { id = "stacks", size = 0.25 },
--       { id = "watches", size = 00.25 },
--     },
--     size = 40,
--     position = "left", -- Can be "left", "right", "top", "bottom"
--   },
--   tray = {
--     elements = { "repl" },
--     size = 10,
--     position = "bottom", -- Can be "left", "right", "top", "bottom"
--   },
--   floating = {
--     max_height = nil, -- These can be integers or a float between 0 and 1.
--     max_width = nil, -- Floats will be treated as percentage of your screen.
--     border = "single", -- Border style. Can be "single", "double" or "rounded"
--     mappings = {
--       close = { "q", "<Esc>" },
--     },
--   },
--   windows = { indent = 1 },
-- })
--
--
-- dap.listeners.after.event_initialized["dapui_config"] = function()
--   dapui.open()
-- end
-- dap.listeners.before.event_terminated["dapui_config"] = function()
--   dapui.close()
-- end
-- dap.listeners.before.event_exited["dapui_config"] = function()
--   dapui.close()
-- end
